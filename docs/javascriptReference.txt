arguments
array.begin
array.end
as
assignment
async
await
bitwise.and
bitwise.or
bitwise.shift.left
bitwise.shift.right
bitwise.shift.unsigned
bitwise.xor
break
case
catch
chain
chain.optional
class
comment.block.begin
comment.block.end
comment.hashbang
comment.single.begin
comment.single.end
const
constructor
continue
debugger
default
delete
different
different.strict
do
else
enum
equals
equals.strict
eval
export
extends
false
finally
for
from
function
function.arrow
function.generator
get
greater
greater.equal
if
implements
import
in
instanceof
lesser
lesser.equal
let
logical.and
logical.not
logical.or
math.decrement
math.increment
math.power
math.times
new
null
nullcoalesc
nullcoalesc.assignment
of
package
private
protected
public
regex.begin
regex.end
return
set
static
string.begin
string.end
super
switch
ternary.else
ternary.if
this
throw
true
try
typeof
undefined
var
void
while
with
yield
yield.generator